[Main]
formulagraph.activeformulae = {y=x^3+a*x^2-x-b}@@130221003812@@163.1.130.189
formulagraph.activeformulae.stored.lissajous = {x=sin(4*b*t);cos(4*a*t),x=sin(4*a*t);cos(4*b*t)}
formulagraph.activeformulae.stored.sanjay.pseudohuber_cost_function = {y=a^2*(sqrt(1+(x/a)^2)-1)}@@130220085118@@163.1.130.189
formulagraph.activeformulae.stored.effort.exponential = {y=(1-exp(-x/a))/(1-exp(-1/a)),y=(exp(x/a)-1)/(exp(1/a)-1)}@@130209220237@@163.1.130.189
formulagraph.activeformulae.stored.effort.powerlaw = {y=x^a-0.11*b*log(1-x),y=x^a}@@130209220830@@163.1.130.189

#Graph library for FunctionGraph
#Graph definitions
formulagraph.library.Polynomial.Linear		 	= y=a*x+b 			//Simple straight line. a is the gradient (rate at which y changes for a given change in x), b is the intercept - the height where the line crosses the y-axis.  
formulagraph.library.Polynomial.Parabola 	 	= y=x^2+a*x-b 		//Parabolic curve, given by a quadratic (an expression involving x^2). There can be two 'solutions' where the curve intersects the X-axis.
formulagraph.library.Polynomial.Cubic		 	= y=x^3+a*x^2-x-b	//Cubic curve (involving x^3), with up to 3 solutions and 2 stationary points.
formulagraph.library.Polynomial.Quartic 	 	= y=x^4+a*x^3-b*x^2-c*x+d  // Quartic curve (involving x^4), with up to 4 solutions and 3 stationary points.
formulagraph.library.Polynomial.Hyperbola1 		= y=1/x				// Basic form of a 'rectangular' hyperbola (the arms are at 90 degrees) at the origin
formulagraph.library.Polynomial.Hyperbola2	 	= y=(x-a)/(x-b)		// Rectangular hyperbola shifted or scaled. Change a and b first.
formulagraph.library.Polynomial.Hyperbola3		= y=sqrt(a*x^2+b*x+c) //Rectangular hyperbola at 45 degrees to the axes. Top half only: add in -sqrt for the bottom!
formulagraph.library.Polynomial.Hyperbola4      = x=a*sinh(t);y=b*cosh(t) // The parametric hyperbola equation resembles that of a circle, but using hyperbolic functions. 
formulagraph.library.Polynomial.GeneralHyperbola = x=a*sinh(t)*sin(c)+b*cosh(t)*cos(c);y=a*sinh(t)*cos(c)-b*cosh(t)*sin(c) // The general  form of a hyperbola 
formulagraph.library.Polynomial.QuadraticRatio  = y=(a*x^2+b*x+c)/(x+d) // The ratio of a quadratic and a linear function. The asymptote is the line y=a*x, and a singularity at x=-d.  

formulagraph.library.Trigonometric.Sine		 	= y=a*sin(b*x+c)	//Sine wave. a is the amplitude, b is the angular speed (which determines the frequency), and c is the phase. When c is PI/2, then you get a*cos(b*x).
formulagraph.library.Trigonometric.Tangent		 	= y=tan(x)			//Basic tangent, the ratio of vertical height to horizontal distance as you go around a circle. (x is angle round the circle).
formulagraph.library.Trigonometric.InverseSine		= y=asin(x)  		//inverse sine is equivalent to x=sin(y) 
formulagraph.library.Trigonometric.InverseCosine  	= y=acos(x)			//inverse cosine: Take the perpendicular projection of a line onto an axis. If x is the ratio of the projected length to the line's length, then this gives the 'angle' of the line with the axis.
formulagraph.library.Trigonometric.InverseTangent	= y=atan(x)
formulagraph.library.Trigonometric.HyperbolicSine	= y=sinh(x) // equals (E^x - E^(-x))/2 : Note that hyperbolics obey the rule cosh(x)+sinh(x)=exp(x), whereas standard trig functions obey cos(x)+i*sin(x)=exp(i*x).
formulagraph.library.Trigonometric.HyperbolicCosine= y=cosh(x) // equals (E^x + E^(-x))/2
formulagraph.library.Trigonometric.HyperbolicTangent=y=tanh(x) // equals sinh/cosh
formulagraph.library.Trigonometric.InverseHyperbolicSine= y=asinh(x) // Equals log(x+sqrt(x^2+1))
formulagraph.library.Trigonometric.InverseHyperbolicCosine= y=acosh(x) // Equals log(x+sqrt(x^2-1))
formulagraph.library.Trigonometric.InverseHyperbolicTangent= y=atanh(x) // Equals log((1+x)/(1-x))/2
formulagraph.library.Trigonometric.SumOfSines		= y=sin(x)+a*sin(b*x+c)	//Sum of two sine waves. a is the relative amplitude,  b controls relative frequency, c is the phase difference.  
formulagraph.library.Trigonometric.ProductOfSines	= y=sin(x)*sin(a*x+b)		//Product of two sine waves. a is the relative frequency, b is the phase difference.
formulagraph.library.Trigonometric.SineCompressed 	= y=a*sin(b/x)		//Sine of the inverse of x. As you can see, this variable has an undefined value between 0 and 1 when x approaches zero.
formulagraph.library.Trigonometric.FourierSum      = y=sin(x)+a*sin(2*x)+b*sin(3*x)+c*sin(4*x)+d*sin(5*x)+e*sin(6*x) // A sum of the first  6 sine wave harmonics: alter the coefficients 'a' to 'e' to give different wave shapes 

formulagraph.library.ConicSections.HorizontalParabola= y=sqrt(x)				//Half a parabola about the x-axis. Add in -sqrt for the lower half! 
formulagraph.library.ConicSections.CircularArc		= y=sqrt(a^2-x^2)			//Semicircle - positive half. Use -sqrt for the other half!
formulagraph.library.ConicSections.ParametricCircle= x=sin(t);y=cos(t)			//Circle using parametric (trigonometric) coordinates. t represents the angle.
formulagraph.library.ConicSections.PolarCircle		= r=1						//In polar coordinates, the circle is just a constant radius.
formulagraph.library.ConicSections.PolarEllipse	= r=1/(a+b*cos(t+c))		//Conic sections using polar coordinates: The main focus is at the origin. If a>b, we have an ellipse, and a is related to the inverse of radius, and b is the eccentricity. As b approaches zero, we get  a circle. If a=b we have a parabola; if a<b we have a hyperbola. a=0 gives a straight line with closest distance b from the origin.
formulagraph.library.ConicSections.ParametricEllipse = x=a*sin(t)+b*cos(t);y=c*cos(t); // General parametric equation for ellipse. Think of it as a linear (matrix) transformation of a circle. 

formulagraph.library.Esoteric.ThreePointClosedCurve= x=1/(a+b*cos(t+c));y=cos(t);//Try reducing the value of b, or changing valus of c.
formulagraph.library.Esoteric.Lissajous		= x=sin(a*t);y=cos((a+1)*t)//Lissajous figures: Try this with a=5, 6, 7 and so on! 
formulagraph.library.Esoteric.Cardioid        = r=1+cos(t) // this is an epicycloid made with two identical-sized circles.
formulagraph.library.Esoteric.Epicycloid      = x=a*cos(t)-b*cos(c*t);y=a*sin(t)-b*sin(c*t) //these patterns are made by moving a rotating circle  around the edge of another circle fixed at the origin. If you use higher values of c, you get more intricate patterns - try c=5.
formulagraph.library.Esoteric.Petals          = r=a+cos(b*t+c) //the radius varies sinusoidally with the angle t. b controls the number of petals - try b=5.

formulagraph.library.Scientific.Exponential     = y=exp(x) //Basic exponential curve. The gradient (rate of change) is always equal to the function's value.
formulagraph.library.Scientific.Decay           = y=a*exp(-x/b) //Exponential decay, where rate of decay depends on the function's value.  When x is zero, the starting value is a. b is known as the time constant.
formulagraph.library.Scientific.DampedOscillation=y=cos(a*x)*exp(-x/b) //This is the solution to a second order differential equation with damping. The exponential factor (time constant b) controls the decay, whereas a controls the frequency.
formulagraph.library.Scientific.Resonance       = y=x*sin(a*x) // This is the solution to a second order differential equation with a driving force at the resonant frequency
formulagraph.library.Scientific.ResonantFrequency=y=1/sqrt(a+(b-x^2)^2/x^2) // This curve gives the gain of a damped resonant system  to sine waves of different frequencies. x is the frequency, and y is the gain. 'b' determines the resonant frequency, and 'a' determines the sensitivity to frequency. 
formulagraph.library.Scientific.LogisticFunction= y=a/(1+exp(-x/b)) //This sigmoid pattern of behaviour is commonly seen in biological systems, where a system behaves linearly in within a certain range, but saturates at extreme values.
formulagraph.library.Scientific.BellCurve       = y=a*exp(-x^2/b) //This is the shape of normal distribution function, b controls the width, and is called the variance - its square root is called the standard deviation. For the area under the curve to be 1, a=1/(sqrt(2*PI*b)).
formulagraph.library.Scientific.ErrorFunction   = y=erf(x) //integral of the normal distribution function, giving a cumulative probability.
formulagraph.library.Scientific.Boltzmann       = y=a*x^2*exp(-x^2/b) //The boltzmann distribution describes the velocity distribution of particles in a gas, where the constants depend on temperature and particle mass.
formulagraph.library.Scientific.Gompertz        = y=a*exp(-b*exp(-c*x)) // Solution to a type of population growth problem
formulagraph.library.Scientific.CauchyDistribution = y=1/(1+((x-a)^2/b)) // This distribution function is also known as the Lorentz distribution.

formulagraph.library.Numeric.Absolute        = y=abs(x) // The absolute value of a number ignores the sign. It is  simply the magnitude of the number. 
formulagraph.library.Numeric.SingleStep      = y=x/abs(x) // the sign of x (positive or negative) is either -1 or +1.
formulagraph.library.Numeric.Steps           = y=floor(a*x) // a 'step' function that gives only integer values. It works by truncating digits after the decimal point.
formulagraph.library.Numeric.Sawtooth        = y=a*x-floor(b*x) // a sawtooth function, that uses 'floor' to create a repetitive pattern
formulagraph.library.Numeric.Noise           = y=random() // Noise uses a random number generator to produce values between 0 and 1.
formulagraph.library.Numeric.Triangular      = y=abs(2*b*x-2*floor(b*x)-a) //When a=1, gives a triangular wave, b controls the frequency. Different values of 'a' shift the parts of the curve around.
formulagraph.library.Numeric.Cogwheel        = r=abs(2*b*x-2*floor(b*x)-a) //made using a sawtooth function as the radius

formulagraph.library.Scientific.Biphasic        = y=b*(x-a)*exp(-c*(x-a)^2) // This is the differential (gradient) of a Gaussian distribution function. The area above and below the axis are equal.
formulagraph.library.Scientific.Gabor           = y=a*sin(c*x+d)*exp(-b*x^2) // This is a product of a sine wave and a Gaussian. The shape is used by the brain and in image software as an edge detector.
 
formulagraph.library.Numeric.Gamma			= y=gamma(x) // This is a continuous version of the factorial function, given by the integral from 0 to +infinity of ( t^(z-1) e^-t ) with respect to t.
formulagraph.library.Numeric.Bessel          = y=bessel(a,x) // The solution to the second order differential equation: t^2 D^2(y) + t D(y) + (t^2-a^2) y = 0. 
formulagraph.library.Numeric.Lambda			= y=x^(x^(b-1)) // A power of a power of x; equivalent to (((x^x)^x)^x)...  repeated b times; i.e. b iterated exponentiations of x.
 
formulagraph.library.Esoteric.Bizarre1		= 0=sin(x)-sin(y-a)-floor(y+b)-b // An unusual implicit function. a and b cause significant changes in the shape of the curve. Can you see why it has sharp points?
